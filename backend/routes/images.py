from fastapi import APIRouter, UploadFile, File, Depends, HTTPException, Form
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, text
from models import get_db, User
from services.s3_service import s3_service
from utils.auth_middleware import get_current_active_user
from pydantic import BaseModel
from typing import List, Dict, Any, Optional
import os
import json
from pathlib import Path

router = APIRouter()

# Pydantic –º–æ–¥–µ–ª–∏
class FolderCreate(BaseModel):
    parentPath: str
    name: str

class FolderRename(BaseModel):
    oldPath: str
    newName: str

class ImageRename(BaseModel):
    oldPath: str
    newName: str

class DeleteRequest(BaseModel):
    path: str

class BulkDeleteRequest(BaseModel):
    paths: List[str]

class MoveRequest(BaseModel):
    sourcePaths: List[str] 
    targetPath: str

class BrowseResponse(BaseModel):
    folders: List[Dict[str, Any]]
    images: List[Dict[str, Any]]
    currentPath: str

@router.get("/browse", response_model=BrowseResponse)
async def browse_images(
    path: str = "/", 
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–ø–æ–∫ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—É—Ç–∏"""
    try:
        result = await s3_service.list_folder_contents(path)
        return BrowseResponse(
            folders=result.get('folders', []),
            images=result.get('images', []),
            currentPath=path
        )
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞–ø–∫–∏: {e}")

@router.post("/folders")
async def create_folder(
    folder_data: FolderCreate,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏"""
    try:
        result = await s3_service.create_folder(folder_data.parentPath, folder_data.name)
        return {"message": "–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞", "path": result}
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")

@router.delete("/folders")
async def delete_folder(
    delete_data: DeleteRequest,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏"""
    try:
        await s3_service.delete_folder(delete_data.path)
        return {"message": "–ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞"}
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏: {e}")

@router.put("/folders/rename")
async def rename_folder(
    rename_data: FolderRename,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏"""
    try:
        result = await s3_service.rename_folder(rename_data.oldPath, rename_data.newName)
        return {"message": "–ü–∞–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞", "newPath": result}
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")

@router.post("/upload")
async def upload_images_to_folder(
    folderPath: str = Form(...),
    images: List[UploadFile] = File(...),
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    try:
        uploaded_files = []
        failed_files = []
        replaced_count = 0

        for image in images:
            try:
                content = await image.read()
                file_path = f"{folderPath.strip('/')}/{image.filename}" if folderPath != "/" else image.filename
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–∞
                result = await s3_service.upload_image_to_path(content, file_path, True)
                
                uploaded_files.append({
                    "filename": image.filename,
                    "url": result['url'],
                    "size": len(content)
                })
                
                if result.get('replaced_duplicate'):
                    replaced_count += 1
                    
            except Exception as e:
                failed_files.append({
                    "filename": image.filename,
                    "error": str(e)
                })

        message = f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} –∏–∑ {len(images)} —Ñ–∞–π–ª–æ–≤"
        if replaced_count > 0:
            message += f" ({replaced_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–º–µ–Ω–µ–Ω–æ)"

        return {
            "uploaded": uploaded_files,
            "failed": failed_files,
            "message": message,
            "replaced_duplicates": replaced_count
        }
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")

@router.post("/upload-zip")
async def upload_zip_to_folder(
    folderPath: str = Form(...),
    zipFile: UploadFile = File(...),
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ ZIP –∞—Ä—Ö–∏–≤–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    import time
    
    if not zipFile.filename.endswith('.zip'):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ZIP –∞—Ä—Ö–∏–≤–æ–º")
    
    start_time = time.time()
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ ZIP: —Ñ–∞–π–ª '{zipFile.filename}' –≤ –ø–∞–ø–∫—É '{folderPath}'")
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–æ —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if zipFile.size and zipFile.size > 2 * 1024 * 1024 * 1024:  # 2GB
            print(f"‚ùå –ê—Ä—Ö–∏–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {zipFile.size} –±–∞–π—Ç (–º–∞–∫—Å–∏–º—É–º 2GB)")
            raise HTTPException(status_code=413, detail="–ê—Ä—Ö–∏–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 2GB)")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞
        print(f"üì• –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞ —Ä–∞–∑–º–µ—Ä–æ–º {zipFile.size or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –±–∞–π—Ç...")
        read_start = time.time()
        content = await zipFile.read()
        read_time = time.time() - read_start
        print(f"‚úÖ –ê—Ä—Ö–∏–≤ –ø—Ä–æ—á–∏—Ç–∞–Ω –∑–∞ {read_time:.2f}—Å, —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {len(content)} –±–∞–π—Ç ({len(content)/(1024*1024):.1f} MB)")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        print(f"üîÑ –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ S3 —Å–µ—Ä–≤–∏—Å...")
        result = await s3_service.upload_zip_to_folder(content, folderPath)
        
        total_time = time.time() - start_time
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        success_count = len(result.get('uploaded', []))
        failed_count = len(result.get('failed', []))
        replaced_count = result.get('replaced_duplicates', 0)
        
        print(f"üèÅ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.1f}—Å:")
        print(f"   üìä –ò—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count + failed_count} —Ñ–∞–π–ª–æ–≤")
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count}")
        print(f"   üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–º–µ–Ω–µ–Ω–æ: {replaced_count}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_count}")
        
        if failed_count > 0:
            print("‚ùó –ü–µ—Ä–≤—ã–µ –æ—à–∏–±–∫–∏:")
            for error in result.get('failed', [])[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                print(f"   - {error.get('filename', 'unknown')}: {error.get('error', 'unknown error')}")
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        total_time = time.time() - start_time
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ZIP –∑–∞ {total_time:.1f}—Å: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ZIP: {e}")

@router.delete("/delete")
async def delete_image(
    delete_data: DeleteRequest,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        await s3_service.delete_image_by_path(delete_data.path)
        return {"message": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"}
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

@router.put("/rename")
async def rename_image(
    rename_data: ImageRename,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        result = await s3_service.rename_image(rename_data.oldPath, rename_data.newName)
        return {"message": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ", "newPath": result}
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

@router.delete("/bulk-delete")
async def bulk_delete_items(
    delete_data: BulkDeleteRequest,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø–∞–ø–æ–∫"""
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        folder_paths: list[str] = []
        image_paths: list[str] = []
        for p in delete_data.paths:
            if p.endswith('/') or not any(p.lower().endswith(ext) for ext in ['.png', '.jpg', '.jpeg', '.gif', '.webp', '.bmp', '.tiff']):
                folder_paths.append(p)
            else:
                image_paths.append(p)

        failed_items = []
        deleted_count = 0

        # –ü–∞–ø–∫–∏ —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ; –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞—Ç—á–µ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        for folder in folder_paths:
            try:
                await s3_service.delete_folder(folder)
                deleted_count += 1
            except Exception as e:
                failed_items.append({"path": folder, "error": str(e)})

        # –§–∞–π–ª—ã —É–¥–∞–ª—è–µ–º –±–∞—Ç—á–∞–º–∏ —á–µ—Ä–µ–∑ S3 DeleteObjects
        if image_paths:
            try:
                result = await s3_service.delete_images_batch(image_paths)
                deleted_count += result.get('deleted', 0)
                for k in result.get('errors', []) or []:
                    failed_items.append({"path": '/' + k if not k.startswith('/') else k, "error": "delete failed"})
            except Exception as e:
                for p in image_paths:
                    failed_items.append({"path": p, "error": str(e)})

        return {
            "message": f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {len(delete_data.paths)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
            "deleted": deleted_count,
            "failed": failed_items
        }
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

@router.post("/move-items")
async def move_items(
    move_data: MoveRequest,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É"""
    try:
        folders: list[str] = []
        images: list[str] = []
        for src in move_data.sourcePaths:
            if src.endswith('/') or not any(src.lower().endswith(ext) for ext in ['.png', '.jpg', '.jpeg', '.gif', '.webp', '.bmp', '.tiff']):
                folders.append(src)
            else:
                images.append(src)

        failed_items = []
        moved_count = 0

        # –ü–∞–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for src in folders:
            try:
                item_name = src.rstrip('/').split('/')[-1]
                dst = f"{move_data.targetPath.rstrip('/')}/{item_name}"
                await s3_service.move_folder(src, dst)
                moved_count += 1
            except Exception as e:
                failed_items.append({"path": src, "error": str(e)})

        # –§–∞–π–ª—ã ‚Äî –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ
        if images:
            pairs = []
            for src in images:
                item_name = src.split('/')[-1]
                dst = f"{move_data.targetPath.rstrip('/')}/{item_name}"
                pairs.append((src, dst))
            result = await s3_service.move_images_concurrent(pairs)
            moved_count += result.get('moved', 0)
            for err in result.get('errors', []):
                failed_items.append({"path": err.get('src'), "error": err.get('error')})

        return {
            "message": f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} –∏–∑ {len(move_data.sourcePaths)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
            "moved": moved_count,
            "failed": failed_items
        }
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {e}")

@router.get("/search")
async def search_images(
    query: str = "",
    folder: str = "/",
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    try:
        results = await s3_service.search_images(query, folder)
        return {"results": results}
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")